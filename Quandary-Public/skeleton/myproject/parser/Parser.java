
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import ast.*;
import interpreter.Interpreter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\003\000\002\011" +
    "\004\000\002\011\002\000\002\010\011\000\002\016\004" +
    "\000\002\016\005\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\012\003\000\002\012\002\000\002" +
    "\013\005\000\002\013\003\000\002\007\004\000\002\007" +
    "\002\000\002\006\006\000\002\006\006\000\002\006\005" +
    "\000\002\006\007\000\002\006\007\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\004\000\002" +
    "\020\006\000\002\014\003\000\002\014\002\000\002\015" +
    "\005\000\002\015\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\006\000\002\003\003\000" +
    "\002\003\003\000\002\003\005\000\002\003\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\005\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\014\002\ufffe\020\011\040\005\041\010\042" +
    "\013\001\002\000\004\011\022\001\002\000\006\012\ufffa" +
    "\044\ufffa\001\002\000\004\002\000\001\002\000\004\002" +
    "\021\001\002\000\006\012\ufff9\044\ufff9\001\002\000\010" +
    "\040\005\041\010\042\013\001\002\000\004\044\016\001" +
    "\002\000\006\012\ufff8\044\ufff8\001\002\000\014\002\ufffe" +
    "\020\011\040\005\041\010\042\013\001\002\000\004\002" +
    "\uffff\001\002\000\012\007\ufffc\011\ufffc\012\ufffc\023\ufffc" +
    "\001\002\000\004\044\020\001\002\000\012\007\ufffb\011" +
    "\ufffb\012\ufffb\023\ufffb\001\002\000\004\002\001\001\002" +
    "\000\014\012\ufff6\020\011\040\005\041\010\042\013\001" +
    "\002\000\004\012\ufff7\001\002\000\004\012\030\001\002" +
    "\000\006\007\026\012\ufff4\001\002\000\012\020\011\040" +
    "\005\041\010\042\013\001\002\000\004\012\ufff5\001\002" +
    "\000\004\013\031\001\002\000\030\013\043\014\ufff2\015" +
    "\042\016\041\020\011\024\040\026\033\040\005\041\010" +
    "\042\013\044\035\001\002\000\004\023\153\001\002\000" +
    "\004\011\147\001\002\000\004\017\146\001\002\000\006" +
    "\011\074\023\143\001\002\000\030\013\043\014\ufff2\015" +
    "\042\016\041\020\011\024\040\026\033\040\005\041\010" +
    "\042\013\044\035\001\002\000\004\014\141\001\002\000" +
    "\016\005\050\011\111\021\054\037\110\043\046\044\051" +
    "\001\002\000\014\005\050\011\052\021\054\043\046\044" +
    "\051\001\002\000\014\005\050\011\052\021\054\043\046" +
    "\044\051\001\002\000\030\013\043\014\ufff2\015\042\016" +
    "\041\020\011\024\040\026\033\040\005\041\010\042\013" +
    "\044\035\001\002\000\004\014\045\001\002\000\032\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\020\uffea\024\uffea\025\uffea" +
    "\026\uffea\040\uffea\041\uffea\042\uffea\044\uffea\001\002\000" +
    "\064\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2" +
    "\013\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\024\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\036\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\001" +
    "\002\000\064\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\012\uffde\013\uffde\015\uffde\016\uffde\017\uffde\020\uffde\024" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\040\uffde\041\uffde\042\uffde\044" +
    "\uffde\001\002\000\014\005\050\011\052\021\054\043\046" +
    "\044\051\001\002\000\066\004\uffe1\005\uffe1\006\uffe1\007" +
    "\uffe1\010\uffe1\011\074\012\uffe1\013\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\044\uffe1\001\002\000\022\005\050\011" +
    "\052\021\054\040\005\041\010\042\013\043\046\044\051" +
    "\001\002\000\014\004\056\005\060\006\061\010\062\017" +
    "\057\001\002\000\064\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\010\uffe3\012\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\044\uffe3\001\002\000\064\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\044\uffdf\001\002\000\014\005\050\011\052" +
    "\021\054\043\046\044\051\001\002\000\032\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\020\uffec\024\uffec\025\uffec\026\uffec" +
    "\040\uffec\041\uffec\042\uffec\044\uffec\001\002\000\014\005" +
    "\050\011\052\021\054\043\046\044\051\001\002\000\014" +
    "\005\050\011\052\021\054\043\046\044\051\001\002\000" +
    "\014\005\050\011\052\021\054\043\046\044\051\001\002" +
    "\000\064\004\056\005\060\006\061\007\uffce\010\uffce\012" +
    "\uffce\013\uffce\015\uffce\016\uffce\017\uffce\020\uffce\024\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\040\uffce\041\uffce\042\uffce\044\uffce" +
    "\001\002\000\064\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\044\uffcf\001\002\000\064\004\uffd0\005\uffd0\006\061\007" +
    "\uffd0\010\uffd0\012\uffd0\013\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\044\uffd0\001\002\000\064\004\uffd1\005\uffd1\006" +
    "\061\007\uffd1\010\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\044\uffd1\001\002\000\004\012\072\001" +
    "\002\000\014\004\056\005\060\006\061\010\062\012\071" +
    "\001\002\000\064\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\044\uffdd\001\002\000\014\005\050\011\052\021\054\043" +
    "\046\044\051\001\002\000\064\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\012\uffe0\013\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\024\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\044\uffe0\001\002\000\016\005\050\011\052" +
    "\012\uffe6\021\054\043\046\044\051\001\002\000\004\012" +
    "\uffe7\001\002\000\004\012\102\001\002\000\016\004\056" +
    "\005\060\006\061\007\100\010\062\012\uffe4\001\002\000" +
    "\014\005\050\011\052\021\054\043\046\044\051\001\002" +
    "\000\004\012\uffe5\001\002\000\064\004\uffe8\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\044\uffe8\001\002\000\064\004\uffdc\005" +
    "\uffdc\006\061\007\uffdc\010\uffdc\012\uffdc\013\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\024\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\044\uffdc\001\002\000\014\004" +
    "\056\005\060\006\061\010\062\017\105\001\002\000\032" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\020\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\040\uffeb\041\uffeb\042\uffeb\044\uffeb\001\002" +
    "\000\032\013\043\015\042\016\041\020\011\024\040\026" +
    "\033\035\131\036\132\040\005\041\010\042\013\044\035" +
    "\001\002\000\026\004\056\005\060\006\061\010\062\027" +
    "\116\030\121\031\114\032\117\033\120\034\115\001\002" +
    "\000\016\005\050\011\111\021\054\037\110\043\046\044" +
    "\051\001\002\000\024\005\050\011\111\021\054\037\110" +
    "\040\005\041\010\042\013\043\046\044\051\001\002\000" +
    "\010\012\130\035\131\036\132\001\002\000\030\004\056" +
    "\005\060\006\061\010\062\012\071\027\116\030\121\031" +
    "\114\032\117\033\120\034\115\001\002\000\014\005\050" +
    "\011\052\021\054\043\046\044\051\001\002\000\014\005" +
    "\050\011\052\021\054\043\046\044\051\001\002\000\014" +
    "\005\050\011\052\021\054\043\046\044\051\001\002\000" +
    "\014\005\050\011\052\021\054\043\046\044\051\001\002" +
    "\000\014\005\050\011\052\021\054\043\046\044\051\001" +
    "\002\000\014\005\050\011\052\021\054\043\046\044\051" +
    "\001\002\000\044\004\056\005\060\006\061\010\062\012" +
    "\uffda\013\uffda\015\uffda\016\uffda\020\uffda\024\uffda\026\uffda" +
    "\035\uffda\036\uffda\040\uffda\041\uffda\042\uffda\044\uffda\001" +
    "\002\000\044\004\056\005\060\006\061\010\062\012\uffd7" +
    "\013\uffd7\015\uffd7\016\uffd7\020\uffd7\024\uffd7\026\uffd7\035" +
    "\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7\001\002" +
    "\000\044\004\056\005\060\006\061\010\062\012\uffd9\013" +
    "\uffd9\015\uffd9\016\uffd9\020\uffd9\024\uffd9\026\uffd9\035\uffd9" +
    "\036\uffd9\040\uffd9\041\uffd9\042\uffd9\044\uffd9\001\002\000" +
    "\044\004\056\005\060\006\061\010\062\012\uffdb\013\uffdb" +
    "\015\uffdb\016\uffdb\020\uffdb\024\uffdb\026\uffdb\035\uffdb\036" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\044\uffdb\001\002\000\044" +
    "\004\056\005\060\006\061\010\062\012\uffd6\013\uffd6\015" +
    "\uffd6\016\uffd6\020\uffd6\024\uffd6\026\uffd6\035\uffd6\036\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\044\uffd6\001\002\000\044\004" +
    "\056\005\060\006\061\010\062\012\uffd8\013\uffd8\015\uffd8" +
    "\016\uffd8\020\uffd8\024\uffd8\026\uffd8\035\uffd8\036\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\044\uffd8\001\002\000\034\012\uffd2" +
    "\013\uffd2\015\uffd2\016\uffd2\020\uffd2\024\uffd2\026\uffd2\035" +
    "\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\001\002" +
    "\000\016\005\050\011\111\021\054\037\110\043\046\044" +
    "\051\001\002\000\016\005\050\011\111\021\054\037\110" +
    "\043\046\044\051\001\002\000\034\012\uffd4\013\uffd4\015" +
    "\uffd4\016\uffd4\020\uffd4\024\uffd4\026\uffd4\035\uffd4\036\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\044\uffd4\001\002\000\034\012" +
    "\uffd5\013\uffd5\015\uffd5\016\uffd5\020\uffd5\024\uffd5\026\uffd5" +
    "\035\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\044\uffd5\001" +
    "\002\000\034\012\uffd3\013\uffd3\015\uffd3\016\uffd3\020\uffd3" +
    "\024\uffd3\026\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\044\uffd3\001\002\000\032\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\020\uffef\024\uffef\025\137\026\uffef\040\uffef\041" +
    "\uffef\042\uffef\044\uffef\001\002\000\026\013\043\015\042" +
    "\016\041\020\011\024\040\026\033\040\005\041\010\042" +
    "\013\044\035\001\002\000\032\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\020\uffee\024\uffee\025\uffee\026\uffee\040\uffee\041" +
    "\uffee\042\uffee\044\uffee\001\002\000\014\002\ufffd\020\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\001\002\000\004\014\ufff3\001" +
    "\002\000\014\005\050\011\052\021\054\043\046\044\051" +
    "\001\002\000\014\004\056\005\060\006\061\010\062\017" +
    "\145\001\002\000\032\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\020\ufff0\024\ufff0\025\ufff0\026\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\044\ufff0\001\002\000\032\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\020\uffe9\024\uffe9\025\uffe9\026\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\044\uffe9\001\002\000\016\005\050\011\111" +
    "\021\054\037\110\043\046\044\051\001\002\000\010\012" +
    "\151\035\131\036\132\001\002\000\026\013\043\015\042" +
    "\016\041\020\011\024\040\026\033\040\005\041\010\042" +
    "\013\044\035\001\002\000\032\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\020\uffed\024\uffed\025\uffed\026\uffed\040\uffed\041" +
    "\uffed\042\uffed\044\uffed\001\002\000\014\005\050\011\052" +
    "\021\054\043\046\044\051\001\002\000\014\004\056\005" +
    "\060\006\061\010\062\017\155\001\002\000\032\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\020\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\044\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\014\002\006\010\013\011\005\016\003\017" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\013\011\014\016\003\017\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\023\013\022\016\024\017" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\026\016\024\017\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\035\007\036" +
    "\016\031\017\011\020\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\035\007\141\016\031\017\011\020\033\001\001\000" +
    "\002\001\001\000\012\003\106\004\046\005\105\020\054" +
    "\001\001\000\010\003\103\004\046\020\054\001\001\000" +
    "\010\003\052\004\046\020\054\001\001\000\014\006\035" +
    "\007\043\016\031\017\011\020\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\102\004\046\020\054\001\001\000\002\001" +
    "\001\000\012\003\067\004\046\017\066\020\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\065\004\046\020\054\001\001\000\002\001\001" +
    "\000\010\003\064\004\046\020\054\001\001\000\010\003" +
    "\063\004\046\020\054\001\001\000\010\003\062\004\046" +
    "\020\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\072\004\046\020" +
    "\054\001\001\000\002\001\001\000\014\003\076\004\046" +
    "\014\075\015\074\020\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\076\004\046" +
    "\015\100\020\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\135\016\031\017\011\020\033\001\001\000" +
    "\002\001\001\000\012\003\106\004\046\005\134\020\054" +
    "\001\001\000\014\003\112\004\046\005\111\017\066\020" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\126\004\046\020\054\001\001\000\010\003\125\004" +
    "\046\020\054\001\001\000\010\003\124\004\046\020\054" +
    "\001\001\000\010\003\123\004\046\020\054\001\001\000" +
    "\010\003\122\004\046\020\054\001\001\000\010\003\121" +
    "\004\046\020\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\106\004" +
    "\046\005\133\020\054\001\001\000\012\003\106\004\046" +
    "\005\132\020\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\137" +
    "\016\031\017\011\020\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\143\004\046" +
    "\020\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\106\004\046\005\147\020\054" +
    "\001\001\000\002\001\001\000\012\006\151\016\031\017" +
    "\011\020\033\001\001\000\002\001\001\000\010\003\153" +
    "\004\046\020\054\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= funcDefList 
            {
              Program RESULT =null;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDefinition> fdl = (List<FunctionDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(fdl, loc(fdlleft, fdlright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // funcDefList ::= funcDef funcDefList 
            {
              List<FunctionDefinition> RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionDefinition fd = (FunctionDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDefinition> fdl = (List<FunctionDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fdl.add(0, fd); RESULT = fdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDefList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcDefList ::= 
            {
              List<FunctionDefinition> RESULT =null;
		 RESULT = new ArrayList<FunctionDefinition>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDefList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcDef ::= varDecl LPAREN formalDeclList RPAREN LCURLY stmtList RCURLY 
            {
              FunctionDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<VarDecl> fdl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDefinition(v, fdl, sl, loc(slleft, slright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // varDecl ::= type IDENT 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecl.TYPE t = (VarDecl.TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDecl(false, t, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // varDecl ::= MUT type IDENT 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecl.TYPE t = (VarDecl.TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new VarDecl(true, t, i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INT 
            {
              VarDecl.TYPE RESULT =null;
		 RESULT = VarDecl.TYPE.INT; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= Q 
            {
              VarDecl.TYPE RESULT =null;
		 RESULT = VarDecl.TYPE.Q; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= REF 
            {
              VarDecl.TYPE RESULT =null;
		 RESULT = VarDecl.TYPE.REF; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formalDeclList ::= neFormalDeclList 
            {
              List<VarDecl> RESULT =null;
		int nfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<VarDecl> nfdl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nfdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalDeclList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formalDeclList ::= 
            {
              List<VarDecl> RESULT =null;
		 RESULT = new ArrayList<VarDecl>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalDeclList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // neFormalDeclList ::= varDecl COMMA neFormalDeclList 
            {
              List<VarDecl> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<VarDecl> nfdl = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 nfdl.add(0, v); RESULT = nfdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neFormalDeclList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // neFormalDeclList ::= varDecl 
            {
              List<VarDecl> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<VarDecl> nfd = new ArrayList<VarDecl>(); nfd.add(0, v); RESULT = nfd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neFormalDeclList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmtList ::= stmt stmtList 
            {
              List<Stmt> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.add(0, st); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmtList ::= 
            {
              List<Stmt> RESULT =null;
		 RESULT = new ArrayList<Stmt>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= varDecl EQUAL expr SEMI 
            {
              Stmt RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclStmt(v, e, loc(vleft, vright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= IDENT EQUAL expr SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclStmt(i, e, loc(ileft, iright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= IF cond stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(c, s, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= IF cond stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfElseStmt(c, s1, s2, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= WHILE LPAREN cond RPAREN stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStmt(c, s, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStmt(e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= PRINT expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PrintStmt(e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= LCURLY stmtList RCURLY 
            {
              Stmt RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StmtList(sl, loc(slleft, slright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= funcCallExpr SEMI 
            {
              Stmt RESULT =null;
		int fceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionCallExpr fce = (FunctionCallExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCallStmt(fce, loc(fceleft, fceright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcCallExpr ::= IDENT LPAREN exprList RPAREN 
            {
              FunctionCallExpr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCallExpr(i, el, loc(ileft, iright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcCallExpr",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exprList ::= neExprList 
            {
              List<Expr> RESULT =null;
		int nelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expr> nel = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exprList ::= 
            {
              List<Expr> RESULT =null;
		 RESULT = new ArrayList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // neExprList ::= expr COMMA neExprList 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expr> nel = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 nel.add(0, e); RESULT = nel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neExprList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // neExprList ::= expr 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Expr> nel = new ArrayList<Expr>(); nel.add(0, e); RESULT = nel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neExprList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= NIL 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstExpr(loc(nleft, nright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= INTCONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Long c = (Long)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstExpr(c, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentExpr(c, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= LPAREN type RPAREN expr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDecl.TYPE t = (VarDecl.TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CastExpr(t, e, loc(tleft, tright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= funcCallExpr 
            {
              Expr RESULT =null;
		int fceleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fceright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunctionCallExpr fce = (FunctionCallExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fce; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= binaryExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BinaryExpr e = (BinaryExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.NEGATIVE, e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond ::= expr LESSEQUAL expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.LESSEQUAL, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond ::= expr LARGEEQUAL expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.LARGEEQUAL, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= expr ISEQUAL expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.ISEQUAL, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond ::= expr NOTEQUAL expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.NOTEQUAL, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond ::= expr LESS expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.LESS, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond ::= expr LARGER expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.LARGER, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= cond AND cond 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond c1 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond c2 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalCond(c1, LogicalCond.AND, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond ::= cond OR cond 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond c1 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond c2 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalCond(c1, LogicalCond.OR, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond ::= NOT cond 
            {
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryCond(UnaryCond.NOT, c, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond ::= LPAREN cond RPAREN 
            {
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // binaryExpr ::= expr PLUS expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // binaryExpr ::= expr MINUS expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // binaryExpr ::= expr TIMES expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // binaryExpr ::= expr DOT expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.DOT, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
