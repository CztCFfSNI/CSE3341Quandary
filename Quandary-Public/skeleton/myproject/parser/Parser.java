
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory;
import ast.*;
import interpreter.Interpreter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\011" +
    "\004\000\002\011\002\000\002\010\012\000\002\012\003" +
    "\000\002\012\002\000\002\013\006\000\002\013\004\000" +
    "\002\007\004\000\002\007\002\000\002\006\007\000\002" +
    "\006\005\000\002\006\007\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\014\003\000\002\014\002" +
    "\000\002\015\005\000\002\015\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\006\000\002\003\003\000\002" +
    "\003\005\000\002\003\004\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\006\002\ufffe\017\007\001\002\000\006\002" +
    "\ufffe\017\007\001\002\000\004\002\125\001\002\000\004" +
    "\002\000\001\002\000\004\035\010\001\002\000\004\010" +
    "\011\001\002\000\006\011\ufffb\017\014\001\002\000\004" +
    "\011\ufffc\001\002\000\004\011\020\001\002\000\004\035" +
    "\015\001\002\000\006\007\016\011\ufff9\001\002\000\004" +
    "\017\014\001\002\000\004\011\ufffa\001\002\000\004\012" +
    "\021\001\002\000\016\012\024\013\ufff7\014\023\015\022" +
    "\017\030\021\027\001\002\000\012\005\035\010\037\034" +
    "\033\035\036\001\002\000\012\005\035\010\037\034\033" +
    "\035\036\001\002\000\016\012\024\013\ufff7\014\023\015" +
    "\022\017\030\021\027\001\002\000\016\012\024\013\ufff7" +
    "\014\023\015\022\017\030\021\027\001\002\000\004\013" +
    "\115\001\002\000\014\005\035\010\065\033\062\034\033" +
    "\035\036\001\002\000\004\035\031\001\002\000\004\020" +
    "\032\001\002\000\012\005\035\010\037\034\033\035\036" +
    "\001\002\000\050\004\uffec\005\uffec\006\uffec\007\uffec\011" +
    "\uffec\012\uffec\014\uffec\015\uffec\016\uffec\017\uffec\021\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\001\002\000\050\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\021\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\001\002\000\012\005\035\010" +
    "\037\034\033\035\036\001\002\000\052\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\052\011\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\021\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\001\002\000" +
    "\012\005\035\010\037\034\033\035\036\001\002\000\012" +
    "\004\041\005\043\006\044\016\042\001\002\000\012\005" +
    "\035\010\037\034\033\035\036\001\002\000\020\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\017\ufff6\021\ufff6\022\ufff6\001" +
    "\002\000\012\005\035\010\037\034\033\035\036\001\002" +
    "\000\012\005\035\010\037\034\033\035\036\001\002\000" +
    "\050\004\uffda\005\uffda\006\uffda\007\uffda\011\uffda\012\uffda" +
    "\014\uffda\015\uffda\016\uffda\017\uffda\021\uffda\023\uffda\024" +
    "\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\001\002\000\050\004\uffdb\005\uffdb\006\044\007\uffdb\011" +
    "\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031" +
    "\uffdb\032\uffdb\001\002\000\050\004\uffdc\005\uffdc\006\044" +
    "\007\uffdc\011\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\001\002\000\012\004\041\005" +
    "\043\006\044\011\051\001\002\000\050\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\011\uffe8\012\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\021\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\001\002\000\014\005" +
    "\035\010\037\011\uffef\034\033\035\036\001\002\000\004" +
    "\011\060\001\002\000\004\011\ufff0\001\002\000\014\004" +
    "\041\005\043\006\044\007\056\011\uffed\001\002\000\012" +
    "\005\035\010\037\034\033\035\036\001\002\000\004\011" +
    "\uffee\001\002\000\050\004\uffea\005\uffea\006\uffea\007\uffea" +
    "\011\uffea\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea\021" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\001\002\000\050\004\uffe7\005\uffe7\006" +
    "\044\007\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\021\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\001\002\000\014\005\035" +
    "\010\065\033\062\034\033\035\036\001\002\000\020\012" +
    "\024\014\023\015\022\017\030\021\027\031\105\032\106" +
    "\001\002\000\024\004\041\005\043\006\044\023\072\024" +
    "\075\025\070\026\073\027\074\030\071\001\002\000\014" +
    "\005\035\010\065\033\062\034\033\035\036\001\002\000" +
    "\010\011\104\031\105\032\106\001\002\000\026\004\041" +
    "\005\043\006\044\011\051\023\072\024\075\025\070\026" +
    "\073\027\074\030\071\001\002\000\012\005\035\010\037" +
    "\034\033\035\036\001\002\000\012\005\035\010\037\034" +
    "\033\035\036\001\002\000\012\005\035\010\037\034\033" +
    "\035\036\001\002\000\012\005\035\010\037\034\033\035" +
    "\036\001\002\000\012\005\035\010\037\034\033\035\036" +
    "\001\002\000\012\005\035\010\037\034\033\035\036\001" +
    "\002\000\030\004\041\005\043\006\044\011\uffe5\012\uffe5" +
    "\014\uffe5\015\uffe5\017\uffe5\021\uffe5\031\uffe5\032\uffe5\001" +
    "\002\000\030\004\041\005\043\006\044\011\uffe2\012\uffe2" +
    "\014\uffe2\015\uffe2\017\uffe2\021\uffe2\031\uffe2\032\uffe2\001" +
    "\002\000\030\004\041\005\043\006\044\011\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\021\uffe4\031\uffe4\032\uffe4\001" +
    "\002\000\030\004\041\005\043\006\044\011\uffe6\012\uffe6" +
    "\014\uffe6\015\uffe6\017\uffe6\021\uffe6\031\uffe6\032\uffe6\001" +
    "\002\000\030\004\041\005\043\006\044\011\uffe1\012\uffe1" +
    "\014\uffe1\015\uffe1\017\uffe1\021\uffe1\031\uffe1\032\uffe1\001" +
    "\002\000\030\004\041\005\043\006\044\011\uffe3\012\uffe3" +
    "\014\uffe3\015\uffe3\017\uffe3\021\uffe3\031\uffe3\032\uffe3\001" +
    "\002\000\022\011\uffdd\012\uffdd\014\uffdd\015\uffdd\017\uffdd" +
    "\021\uffdd\031\uffdd\032\uffdd\001\002\000\014\005\035\010" +
    "\065\033\062\034\033\035\036\001\002\000\014\005\035" +
    "\010\065\033\062\034\033\035\036\001\002\000\022\011" +
    "\uffdf\012\uffdf\014\uffdf\015\uffdf\017\uffdf\021\uffdf\031\uffdf" +
    "\032\uffdf\001\002\000\022\011\uffe0\012\uffe0\014\uffe0\015" +
    "\uffe0\017\uffe0\021\uffe0\031\uffe0\032\uffe0\001\002\000\020" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5\021\ufff5\022" +
    "\112\001\002\000\014\012\024\014\023\015\022\017\030" +
    "\021\027\001\002\000\020\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\017\ufff4\021\ufff4\022\ufff4\001\002\000\022\011\uffde" +
    "\012\uffde\014\uffde\015\uffde\017\uffde\021\uffde\031\uffde\032" +
    "\uffde\001\002\000\006\002\ufffd\017\ufffd\001\002\000\004" +
    "\013\ufff8\001\002\000\004\013\120\001\002\000\020\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1\021\ufff1\022\ufff1" +
    "\001\002\000\012\004\041\005\043\006\044\016\122\001" +
    "\002\000\020\012\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3" +
    "\021\ufff3\022\ufff3\001\002\000\012\004\041\005\043\006" +
    "\044\016\124\001\002\000\020\012\ufff2\013\ufff2\014\ufff2" +
    "\015\ufff2\017\ufff2\021\ufff2\022\ufff2\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\010\002\004\010\003\011\005\001\001\000" +
    "\006\010\003\011\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\012\013\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\024" +
    "\007\025\001\001\000\006\003\122\004\033\001\001\000" +
    "\006\003\120\004\033\001\001\000\006\006\024\007\116" +
    "\001\001\000\006\006\024\007\115\001\001\000\002\001" +
    "\001\000\010\003\063\004\033\005\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\037\004\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\060" +
    "\004\033\001\001\000\002\001\001\000\006\003\047\004" +
    "\033\001\001\000\002\001\001\000\006\003\046\004\033" +
    "\001\001\000\002\001\001\000\006\003\045\004\033\001" +
    "\001\000\006\003\044\004\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\054\004\033\014\052\015\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\054\004\033\015\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\063\004\033\005\113\001\001\000\004\006\110\001\001" +
    "\000\002\001\001\000\010\003\066\004\033\005\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\102" +
    "\004\033\001\001\000\006\003\101\004\033\001\001\000" +
    "\006\003\100\004\033\001\001\000\006\003\077\004\033" +
    "\001\001\000\006\003\076\004\033\001\001\000\006\003" +
    "\075\004\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\063\004\033" +
    "\005\107\001\001\000\010\003\063\004\033\005\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
  Lexer lexer;

  public Parser(Lexer lex, ComplexSymbolFactory sf) {
    super(lex, sf);
    lexer = lex;
  }

  public void report_fatal_error(String message, Object info) {
    Interpreter.fatalError(message + " (" + info + ")", Interpreter.EXIT_PARSING_ERROR);
  }

  ast.Location loc(int line, int column) {
    return new ast.Location(line, column);
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= funcDefList 
            {
              Program RESULT =null;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDefinition> fdl = (List<FunctionDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(fdl, loc(fdlleft, fdlright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // funcDefList ::= funcDef funcDefList 
            {
              List<FunctionDefinition> RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunctionDefinition fd = (FunctionDefinition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<FunctionDefinition> fdl = (List<FunctionDefinition>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 fdl.add(0, fd); RESULT = fdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDefList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcDefList ::= 
            {
              List<FunctionDefinition> RESULT =null;
		 RESULT = new ArrayList<FunctionDefinition>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDefList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcDef ::= INT IDENT LPAREN formalDeclList RPAREN LCURLY stmtList RCURLY 
            {
              FunctionDefinition RESULT =null;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String funcName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<String> fdl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionDefinition(funcName, fdl, sl, loc(slleft, slright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDef",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // formalDeclList ::= neFormalDeclList 
            {
              List<String> RESULT =null;
		int nfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> nfdl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nfdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalDeclList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // formalDeclList ::= 
            {
              List<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formalDeclList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // neFormalDeclList ::= INT IDENT COMMA neFormalDeclList 
            {
              List<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nfdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nfdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<String> nfdl = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 nfdl.add(0, i); RESULT = nfdl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neFormalDeclList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // neFormalDeclList ::= INT IDENT 
            {
              List<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<String> nfd = new ArrayList<String>(); nfd.add(0, i); RESULT = nfd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neFormalDeclList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmtList ::= stmt stmtList 
            {
              List<Stmt> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 sl.add(0, st); RESULT = sl; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmtList ::= 
            {
              List<Stmt> RESULT =null;
		 RESULT = new ArrayList<Stmt>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= INT IDENT EQUAL expr SEMI 
            {
              Stmt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DeclStmt(i, e, loc(ileft, iright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= IF cond stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStmt(c, s, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= IF cond stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfElseStmt(c, s1, s2, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= RETURN expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReturnStmt(e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= PRINT expr SEMI 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PrintStmt(e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= LCURLY stmtList RCURLY 
            {
              Stmt RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Stmt> sl = (List<Stmt>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new StmtList(sl, loc(slleft, slright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exprList ::= neExprList 
            {
              List<Expr> RESULT =null;
		int nelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expr> nel = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = nel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exprList ::= 
            {
              List<Expr> RESULT =null;
		 RESULT = new ArrayList<Expr>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // neExprList ::= expr COMMA neExprList 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nelleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nelright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Expr> nel = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 nel.add(0, e); RESULT = nel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neExprList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // neExprList ::= expr 
            {
              List<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Expr> nel = new ArrayList<Expr>(); nel.add(0, e); RESULT = nel; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("neExprList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= INTCONST 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Long c = (Long)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConstExpr(c, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= IDENT 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentExpr(c, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= IDENT LPAREN exprList RPAREN 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Expr> el = (List<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunctionCallExpr(i, el, loc(ileft, iright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= binaryExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BinaryExpr e = (BinaryExpr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryExpr.NEGATIVE, e, loc(eleft, eright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cond ::= expr LESSEQUAL expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.LESSEQUAL, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cond ::= expr LARGEEQUAL expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.LARGEEQUAL, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cond ::= expr ISEQUAL expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.ISEQUAL, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cond ::= expr NOTEQUAL expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.NOTEQUAL, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cond ::= expr LESS expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.LESS, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cond ::= expr LARGER expr 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr c1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr c2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CompCond(c1, CompCond.LARGER, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cond ::= cond AND cond 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond c1 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond c2 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalCond(c1, LogicalCond.AND, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cond ::= cond OR cond 
            {
              Cond RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Cond c1 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond c2 = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LogicalCond(c1, LogicalCond.OR, c2, loc(c1left, c1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cond ::= NOT cond 
            {
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryCond(UnaryCond.NOT, c, loc(cleft, cright)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cond ::= LPAREN cond RPAREN 
            {
              Cond RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // binaryExpr ::= expr PLUS expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.PLUS, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binaryExpr ::= expr MINUS expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.MINUS, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // binaryExpr ::= expr TIMES expr 
            {
              BinaryExpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryExpr.TIMES, e2, loc(e1left, e1right)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("binaryExpr",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
